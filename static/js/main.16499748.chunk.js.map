{"version":3,"sources":["Components/ContactsItem/ContactsItem.module.css","Components/Filter/Filter.module.css","Transition/list.module.css","Components/ContactsList/ContactList.module.css","Components/ContactForm/ContactForm.module.css","Transition/pop.module.css","Components/App/App.module.css","Components/ContactsItem/ContactsItem.js","redux/actionsTypes.js","redux/contactsActions.js","redux/contactsOperations.js","redux/api.js","Components/ContactsItem/ContactsItemContainer.js","Components/ContactsList/ContactsList.js","redux/selector.js","Components/ContactsList/ContactsListContainer.js","Components/ContactForm/ContactForm.js","Components/ContactForm/ContactFormContainer.js","Components/Filter/Filter.js","Components/Filter/FilterContainer.js","Components/Logo/Logo.js","Components/App/App.js","redux/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","ContactsItem","name","number","id","deleteContact","className","styles","item","type","onClick","button","Type","filterContact","createAction","getContactsStart","getContactsSucess","getContactsError","postContactStart","postContactSuccess","postContactError","deleteContactStart","deleteContactSuccess","deleteContactError","postContact","contact","dispatch","Axios","post","then","data","catch","error","delete","deleteItem","connect","ContactsList","contacts","filter","filteredContacts","toLowerCase","includes","filterContacts","TransitionGroup","component","list","map","CSSTransition","timeout","unmountOnExit","key","classNames","TransitionList","getContacts","state","getFilter","InitialState","AddContact","contactToAdd","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","some","alert","reset","onSubmit","this","placeholder","onChange","Component","ContactForm","Filter","handleFilter","pop","in","length","container","input","contactsActions","Logo","appear","App","fetchContacts","FilterContainer","mapDispatchToProps","get","contactsReducer","createReducer","payload","filterReducer","combineReducers","middlewares","applyMiddleware","thunk","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,OAAS,6BAA6B,KAAO,6B,mBCA/DD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,wB,mBCAhED,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,YAAc,0BAA0B,KAAO,mBAAmB,WAAa,2B,mBCA7HD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,OAAS,8B,mBCA3BD,EAAOC,QAAU,CAAC,MAAQ,mBAAmB,YAAc,yBAAyB,KAAO,kBAAkB,WAAa,0B,mBCA1HD,EAAOC,QAAU,CAAC,UAAY,yB,gPCyBfC,EAtBM,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,cAGxC,OACE,wBAAIC,UAAWC,IAAOC,MACpB,2BACG,kCAAQN,EAAR,IAAeC,GAChB,4BAAQM,KAAK,SAASC,QANhB,kBAAML,EAAcD,IAMUE,UAAWC,IAAOI,QAAtD,a,wBCXKC,EACK,iBADLA,EAGS,qBAHTA,EAIW,sBAJXA,EAKS,qBALTA,EAOS,qBAPTA,EAQW,uBARXA,EASS,qBATTA,EAWW,uBAXXA,EAYY,wBAZZA,EAaW,uBCVXC,EAAgBC,YAAaF,GAE7BG,EAAmBD,YAAaF,GAEhCI,EAAoBF,YAAaF,GAEjCK,EAAmBH,YAAaF,GAEhCM,EAAmBJ,YAAaF,GAEhCO,EAAqBL,YAAaF,GAElCQ,EAAmBN,YAAaF,GAEhCS,EAAqBP,YAAaF,GAElCU,EAAuBR,YAAaF,GAEpCW,EAAqBT,YAAaF,GCXlCY,EAAc,SAAAC,GAAO,OAAI,SAAAC,GACpCA,EAASR,KACTQ,ECOkB,SAAAD,GAAO,OAAI,SAAAC,GAC7BC,IAAMC,KAAK,iCAAkCH,GAC1CI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASP,EAAmBW,OAC/CC,OAAM,SAAAC,GAAK,OAAIN,EAASN,EAAiBY,QDVnCJ,CAAKH,MAEHpB,EAAgB,SAAAD,GAAE,OAAI,SAAAsB,GACjCA,EAASL,KACTK,ECFwB,SAAAtB,GAAE,OAAI,SAAAsB,GAC9BC,IAAMM,OAAN,yCAA+C7B,IAC5CyB,MAAK,kBAAMH,EAASJ,EAAqBlB,OACzC2B,OAAM,SAAAC,GAAK,OAAIN,EAASH,EAAmBS,QDDrCE,CAAW9B,MERP+B,cAAS,MAJG,SAACT,GAAD,MAAe,CACxCrB,cAAe,SAACD,GAAD,OAAQsB,EAASrB,EAAcD,QAGjC+B,CAAmClC,GCwBnCmC,EAnBM,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC1BC,EAAmBD,EAPJ,SAACD,EAAUC,GAChC,OAAOD,EAASC,QAAO,SAACb,GAAD,OACrBA,EAAQvB,KAAKsC,cAAcC,SAASH,EAAOE,kBAKXE,CAAeL,EAAUC,GAAUD,EAErE,OACE,kBAACM,EAAA,EAAD,CAAiBC,UAAU,KAAKtC,UAAWC,IAAOsC,MAC/CN,EAAiBO,KAAI,gBAAG5C,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,GAAjB,OACpB,kBAAC2C,EAAA,EAAD,CACEC,QAAS,IACTC,eAAa,EACbC,IAAK9C,EACL+C,WAAYC,KAEZ,kBAAC,EAAD,CAAqBlD,KAAMA,EAAMC,OAAQA,EAAQC,GAAIA,UCzBlDiD,EAAc,SAACC,GAAD,OAAWA,EAAMjB,UAC/BkB,EAAY,SAACD,GAAD,OAAWA,EAAMhB,QCS3BH,eALS,SAACmB,GAAD,MAAY,CAClCjB,SAAUgB,EAAYC,GACtBhB,OAAQiB,EAAUD,MAGLnB,CAAyBC,G,mCCLlCoB,GAAe,CAAEtD,KAAM,GAAIC,OAAQ,IAEpBsD,G,4MACnBH,MAAQ,CAAEI,aAAa,eAAMF,K,EAE7BG,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACR1D,EAAgB0D,EAAhB1D,KAAM2D,EAAUD,EAAVC,MAEd,EAAKC,UAAS,gBAAGJ,EAAH,EAAGA,aAAH,MAAuB,CACnCA,aAAa,2BAAMA,GAAP,kBAAsBxD,EAAO2D,S,EAI7CE,aAAe,SAACC,GACdA,EAAEC,iBADkB,MAEK,EAAKX,MAAMI,aAA5BxD,EAFY,EAEZA,KAAMC,EAFM,EAENA,OAETD,GAIAC,IAKH,EAAK+D,MAAM7B,SAAS8B,MAClB,SAAC1C,GAAD,OAAaA,EAAQvB,KAAKsC,gBAAkBtC,EAAKsC,iBAGnD4B,MAAM,GAAD,OAAIlE,EAAJ,4BAIP,EAAKgE,MAAM1C,YAAX,eAA4B,EAAK8B,MAAMI,eACvC,EAAKW,W,EAGPA,MAAQ,WACN,EAAKP,SAAS,CAAEJ,aAAa,eAAMF,O,uDAKnC,OACE,0BAAMc,SAAUC,KAAKR,cACnB,2BACEtD,KAAK,OACLP,KAAK,OACLsE,YAAY,gEACZC,SAAUF,KAAKZ,aACfE,MAAOU,KAAKjB,MAAMI,aAAaxD,OAEjC,2BACEO,KAAK,OACLP,KAAK,SACLsE,YAAY,4EACZC,SAAUF,KAAKZ,aACfE,MAAOU,KAAKjB,MAAMI,aAAavD,SAEjC,4BAAQM,KAAK,SAASH,UAAWC,KAAOI,QAAxC,oB,GA1DgC+D,aCMzBvC,gBARS,SAACmB,GAAD,MAAY,CAClCjB,SAAUgB,EAAYC,OAGG,SAAC5B,GAAD,MAAe,CACxCF,YAAa,SAACC,GAAD,OAAaC,EAASF,EAAYC,QAGlCU,CAA6CwC,I,wCCY7CC,GAnBA,SAAC,GAAD,IAAGvC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQuC,EAArB,EAAqBA,aAArB,OACb,kBAAC9B,EAAA,EAAD,CACEI,WAAY2B,KACZ9B,QAAS,IACTC,eAAa,EACb8B,GAAI1C,EAAS2C,OAAS,GAEtB,yBAAK1E,UAAWC,KAAO0E,WACrB,0JACA,2BACE3E,UAAWC,KAAO2E,MAClBV,YAAY,iIACZX,MAAOvB,EACPmC,SAAU,SAACT,GAAD,OAAOa,EAAab,EAAEJ,OAAOC,aCLhC1B,gBATS,SAACmB,GAAD,MAAY,CAClCjB,SAAUgB,EAAYC,GACtBhB,OAAQiB,EAAUD,OAGO,SAAC5B,GAAD,MAAe,CACxCmD,aAAc,SAACvC,GAAD,OAAYZ,EAASyD,EAA8B7C,QAGpDH,CAA6CyC,I,oBCF7CQ,I,MARF,WACX,OACE,kBAACrC,EAAA,EAAD,CAAegC,IAAE,EAAC/B,QAAS,IAAKG,WAAW,OAAOkC,QAAM,GACtD,4CCGAC,G,kLAEFf,KAAKL,MAAMqB,kB,+BAIX,OACE,yBAAKjF,UAAWC,KAAO0E,WACrB,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,wCACA,kBAACO,GAAD,MACA,kBAAC,EAAD,W,GAZUd,aAkBZe,GAAqB,CACzBF,cXvB2B,kBAAM,SAAA7D,GACjCA,EAASX,KACTW,GCCuB,SAAAA,GACvBC,IAAM+D,IAAI,kCACP7D,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASV,EAAkBc,OAC9CC,OAAM,SAAAC,GAAK,OAAIN,EAAST,EAAiBe,aUoB/BG,eAAQ,KAAMsD,GAAdtD,CAAkCmD,I,iBC7B3CK,GAAkBC,YAAc,IAAD,mBAClChF,GAA4B,SAAC0C,EAAD,YAAUuC,WADJ,cAElCjF,GAA4B,SAAC0C,EAAD,OAAUuC,EAAV,EAAUA,QAAV,6BAA4BvC,GAA5B,CAAmCuC,OAF7B,cAGlCjF,GAA6B,SAAC0C,EAAD,OAAUuC,EAAV,EAAUA,QAAV,OAC5BvC,EAAMhB,QAAO,qBAAGlC,KAAgByF,QAJC,IAO/BC,GAAgBF,YAAc,GAAD,eAChChF,GAAsB,SAAC0C,EAAD,YAAUuC,YAGpBE,8BAAgB,CAC7B1D,SAAUsD,GACVrD,OAAQwD,K,kBCXJE,GAAcC,2BAAgBC,MAIrBC,GAFDC,uBAAYT,GAAiBU,+BAAoBL,KCD/DM,IAASC,OAEP,kBAAC,IAAD,CAAUJ,MAAOA,IACb,kBAAC,GAAD,OAEJK,SAASC,eAAe,W","file":"static/js/main.16499748.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactsItem_button__3L-Xd\",\"item\":\"ContactsItem_item__Xz_kR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1QcX-\",\"input\":\"Filter_input__1JhjF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"list_enter__3JuN5\",\"enterActive\":\"list_enterActive__14l0n\",\"exit\":\"list_exit__1d9Eq\",\"exitActive\":\"list_exitActive__1x9A_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1E7eZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__2Sygy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1qjtJ\",\"enterActive\":\"pop_enterActive__3oqM0\",\"exit\":\"pop_exit__1z9lT\",\"exitActive\":\"pop_exitActive__2Ino_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2NuDh\"};","import React from \"react\";\r\nimport styles from \"./ContactsItem.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactsItem = ({ name, number, id, deleteContact }) => {\r\n  const del = () => deleteContact(id);\r\n\r\n  return (\r\n    <li className={styles.item}>\r\n      <p>\r\n         <span> {name} {number}</span>\r\n        <button type=\"button\" onClick={del} className={styles.button}>\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactsItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsItem;","export const Type = {\r\n  FILTER_CONTACT: \"FILTER_CONTACT\",\r\n\r\n  GET_CONTACTS_START: \"GET_CONTACTS_START\",\r\n  GET_CONTACTS_SUCCESS: \"GET_CONTACTS_SUCCES\",\r\n  GET_CONTACTS_ERROR: \"GET_CONTACTS_ERROR\",\r\n\r\n  POST_CONTACT_START: \"POST_CONTACT_START\",\r\n  POST_CONTACT_SUCCESS: \"POST_CONTACT_SUCCESS\",\r\n  POST_CONTACT_ERROR: \"POST_CONTACT_ERROR\",\r\n  \r\n  DELETE_CONTACT_START: \"DELETE_CONTACT_START\",\r\n  DELETE_CONTACT_SUCESS: \"DELETE_CONTACT_SUCESS\",\r\n  DELETE_CONTACT_ERROR: \"DELETE_CONTACT_ERROR\",\r\n};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { Type } from \"./actionsTypes\";\r\n\r\nexport const filterContact = createAction(Type.FILTER_CONTACT);\r\n\r\nexport const getContactsStart = createAction(Type.GET_CONTACTS_START);\r\n\r\nexport const getContactsSucess = createAction(Type.GET_CONTACTS_SUCCESS);\r\n\r\nexport const getContactsError = createAction(Type.GET_CONTACTS_ERROR);\r\n\r\nexport const postContactStart = createAction(Type.POST_CONTACT_START);\r\n\r\nexport const postContactSuccess = createAction(Type.POST_CONTACT_SUCCESS);\r\n\r\nexport const postContactError = createAction(Type.POST_CONTACT_ERROR);\r\n\r\nexport const deleteContactStart = createAction(Type.DELETE_CONTACT_START);\r\n\r\nexport const deleteContactSuccess = createAction(Type.DELETE_CONTACT_SUCESS);\r\n\r\nexport const deleteContactError = createAction(Type.DELETE_CONTACT_ERROR);\r\n","import { get, post, deleteItem } from \"./api\";\r\nimport {\r\n  getContactsStart,\r\n  postContactStart,\r\n  deleteContactStart,\r\n} from \"./contactsActions\";\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(getContactsStart());\r\n  dispatch(get());\r\n};\r\nexport const postContact = contact => dispatch => {\r\n  dispatch(postContactStart());\r\n  dispatch(post(contact));\r\n};\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactStart());\r\n  dispatch(deleteItem(id));\r\n};","import Axios from \"axios\";\r\nimport {\r\n  getContactsSucess,\r\n  getContactsError,\r\n  postContactSuccess,\r\n  postContactError,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from \"./contactsActions\";\r\nexport const get = () => dispatch => {\r\n  Axios.get(\"http://localhost:4000/contacts\")\r\n    .then(({ data }) => dispatch(getContactsSucess(data)))\r\n    .catch(error => dispatch(getContactsError(error)));\r\n};\r\nexport const deleteItem = id => dispatch => {\r\n  Axios.delete(`http://localhost:4000/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\nexport const post = contact => dispatch => {\r\n  Axios.post(\"http://localhost:4000/contacts\", contact)\r\n    .then(({ data }) => dispatch(postContactSuccess(data)))\r\n    .catch(error => dispatch(postContactError(error)));\r\n};","import ContactsItem from \"./ContactsItem\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteContact } from \"../../redux/contactsOperations\";\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect (null, mapDispatchToProps)(ContactsItem);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport TransitionList from \"../../Transition/list.module.css\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport ContactsItemConnect from \"../ContactsItem/ContactsItemContainer\";\r\n\r\nconst filterContacts = (contacts, filter) => {\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n};\r\n\r\nconst ContactsList = ({ contacts, filter }) => {\r\n  const filteredContacts = filter ? filterContacts(contacts, filter) : contacts;\r\n\r\n  return (\r\n    <TransitionGroup component=\"ul\" className={styles.list}>\r\n      {filteredContacts.map(({ name, number, id }) => (\r\n        <CSSTransition\r\n          timeout={250}\r\n          unmountOnExit\r\n          key={id}\r\n          classNames={TransitionList}\r\n        >\r\n          <ContactsItemConnect name={name} number={number} id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};","export const getContacts = (state) => state.contacts;\r\nexport const getFilter = (state) => state.filter;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport ContactsList from \"../ContactsList/ContactsList\";\r\nimport { getContacts, getFilter } from \"../../redux/selector\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n  filter: getFilter(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactsList);","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\n\r\nconst InitialState = { name: \"\", number: \"\" };\r\n\r\nexport default class AddContact extends Component {\r\n  state = { contactToAdd: { ...InitialState } };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n\r\n    this.setState(({ contactToAdd }) => ({\r\n      contactToAdd: { ...contactToAdd, [name]: value },\r\n    }));\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state.contactToAdd;\r\n\r\n    if (!name) {\r\n      return;\r\n    }\r\n\r\n    if (!number) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      this.props.contacts.some(\r\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`${name} is already in contact`);\r\n      return;\r\n    }\r\n\r\n    this.props.postContact({ ...this.state.contactToAdd });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ contactToAdd: { ...InitialState } });\r\n  };\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Введите имя\"\r\n          onChange={this.handleChange}\r\n          value={this.state.contactToAdd.name}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          placeholder=\"Введите номер\"\r\n          onChange={this.handleChange}\r\n          value={this.state.contactToAdd.number}\r\n        />\r\n        <button type=\"submit\" className={styles.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddContact.propTypes = {\r\n  postContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};","import { connect } from \"react-redux\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport { postContact } from \"../../redux/contactsOperations\";\r\nimport { getContacts } from \"../../redux/selector\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  postContact: (contact) => dispatch(postContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport pop from \"../../Transition/pop.module.css\";\r\nimport styles from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ contacts, filter, handleFilter }) => (\r\n  <CSSTransition\r\n    classNames={pop}\r\n    timeout={250}\r\n    unmountOnExit\r\n    in={contacts.length > 1}\r\n  >\r\n    <div className={styles.container}>\r\n      <p>Поиск контакта по имени</p>\r\n      <input\r\n        className={styles.input}\r\n        placeholder=\"Поиск контакта по имени...\"\r\n        value={filter}\r\n        onChange={(e) => handleFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  </CSSTransition>\r\n);\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  handleFilter: PropTypes.func.isRequired,\r\n};","import Filter from \"./Filter\";\r\nimport { connect } from \"react-redux\";\r\nimport * as contactsActions from \"../../redux/contactsActions\";\r\nimport { getContacts, getFilter } from \"../../redux/selector\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleFilter: (filter) => dispatch(contactsActions.filterContact(filter)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./Logo.css\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <CSSTransition in timeout={600} classNames=\"Logo\" appear>\r\n      <h1>Phonebook</h1>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default Logo;","import React, { Component } from \"react\";\r\nimport ContactsList from \"../ContactsList/ContactsListContainer\";\r\nimport ContactForm from \"../ContactForm/ContactFormContainer\";\r\nimport FilterContainer from \"../Filter/FilterContainer\";\r\nimport styles from \"./App.module.css\";\r\nimport Logo from \"../Logo/Logo\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchContacts } from \"../../redux/contactsOperations\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <Logo  />\r\n        <ContactForm  />\r\n        <h2>Contacts</h2>\r\n        <FilterContainer />\r\n        <ContactsList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  fetchContacts: fetchContacts,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n\r\nApp.propTypes = {\r\n  fetchContacts: PropTypes.func.isRequired,\r\n};","import { Type } from \"./actionsTypes\";\r\nimport { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [Type.GET_CONTACTS_SUCCESS]: (state, { payload }) => payload,\r\n  [Type.POST_CONTACT_SUCCESS]: (state, { payload }) => [...state, payload],\r\n  [Type.DELETE_CONTACT_SUCESS]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [Type.FILTER_CONTACT]: (state, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts: contactsReducer ,\r\n  filter: filterReducer,\r\n});","import { createStore, applyMiddleware } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./contactsReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middlewares = applyMiddleware(thunk);\r\n\r\nconst store = createStore(contactsReducer, composeWithDevTools(middlewares));\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./Components/App/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n    \r\n    "],"sourceRoot":""}